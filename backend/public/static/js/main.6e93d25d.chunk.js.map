{"version":3,"sources":["features/songSlice.ts","config.js","features/SongInit.tsx","features/SeededPsudoRandomGenerator.ts","features/clipboard-utils.ts","features/PlayingSong.tsx","features/SongContainer.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["SongStateEnum","config","apiGateway","URL","apiGatewayUrl","initialState","songStage","SELECTION","topic","words","songSlice","createSlice","name","reducers","selectTopic","state","action","LOADING","payload","receiveSong","PLAYING","restart","innerRestart","actions","selectWords","song","map","word","sound","Uint8Array","from","atob","c","charCodeAt","buffer","selectSongStage","SongInit","useState","setTopic","dispatch","useDispatch","onClickHandler","Tone","window","history","pushState","queryParams","URLSearchParams","append","fetch","toString","then","response","json","fetchSong","useEffect","str","location","search","get","trim","length","className","onSubmit","value","type","onChange","e","target","onPress","psudorandomGeneratorFromString","seed","i","h","Math","imul","xmur3","t","copyTextToClipboard","text","navigator","clipboard","writeText","console","log","err","error","textArea","document","createElement","style","top","left","position","body","appendChild","focus","select","msg","execCommand","removeChild","fallbackCopyTextToClipboard","toSampler","audioBuffer","urls","release","toDestination","playSong","a","Promise","all","item","decodeAudioData","slice","duration","sounds","time","random","timeAdd","sampler","randomNoteChange","floor","randomTimeChange","triggerAttackRelease","toFrequency","pause","player","url","volume","fadeOut","start","dispose","stop","triedToStopNullSong","stopSongFunction","stopSong","setStopSongFunction","stopFunction","PlayingSong","props","alert","useAlert","alt","src","share","title","href","catch","show","invalidState","SongContainer","stage","useSelector","active","color","App","store","configureStore","reducer","songReducer","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","alertOptions","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","ReactDOM","render","StrictMode","template","AlertTemplate","getElementById","process","origin","addEventListener","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6e93d25d.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../app/store';\r\nimport config from '../config';\r\n\r\nconst apiGatewayUrl = config.apiGateway.URL;\r\n\r\nexport interface WordResult {\r\n  word: string;\r\n  sound: string;\r\n}\r\n\r\ninterface SongState {\r\n  songStage: SongStateEnum;\r\n  topic: string | null;\r\n  words: Array<WordResult> | null;\r\n}\r\n\r\ninterface SongResultPayload {\r\n  topic: string;\r\n  words: Array<WordResult>;\r\n}\r\n\r\nexport enum SongStateEnum {\r\n  SELECTION,\r\n  LOADING,\r\n  PLAYING\r\n}\r\n\r\nconst initialState: SongState = {\r\n  songStage: SongStateEnum.SELECTION,\r\n  topic: null,\r\n  words: null\r\n};\r\n\r\nexport const songSlice = createSlice({\r\n  name: 'song',\r\n  initialState,\r\n  reducers: {\r\n    selectTopic: (state, action: PayloadAction<string>) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.songStage = SongStateEnum.LOADING;\r\n      state.topic = action.payload\r\n    },\r\n    receiveSong: (state, action: PayloadAction<SongResultPayload>) => {\r\n      state.songStage = SongStateEnum.PLAYING;\r\n      state.topic = action.payload.topic;\r\n      state.words = action.payload.words;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    restart: (state) => {\r\n      state.songStage = SongStateEnum.SELECTION;\r\n      state.topic = null;\r\n      state.words = null;\r\n    },\r\n  },\r\n});\r\n\r\nconst innerRestart = songSlice.actions.restart;\r\nconst { receiveSong, selectTopic } = songSlice.actions;\r\n\r\nexport const restart = (): AppThunk => dispatch => {\r\n  // @ts-ignore\r\n  window.history.pushState({}, '', \"/\");\r\n  dispatch(innerRestart());\r\n}\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const fetchSong = (topic: string): AppThunk => dispatch => {\r\n  dispatch(selectTopic(topic))\r\n      \r\n  // @ts-ignore\r\n  window.history.pushState({topic}, topic, \"?topic=\" + topic);\r\n\r\n  let queryParams = new URLSearchParams();\r\n  queryParams.append(\"topic\", topic);\r\n  queryParams.append(\"limit\", \"27\");\r\n  \r\n  fetch(`${apiGatewayUrl}/vocalTrack?${queryParams.toString()}`)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(json => {          \r\n          dispatch(receiveSong({\r\n            topic: json.topic, \r\n            words: json.words\r\n          }));\r\n        });\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectWords = (state: RootState) => state.song.words?.map(({word, sound})=> {\r\n  return {\r\n    word, \r\n    sound: Uint8Array.from(atob(sound), c => c.charCodeAt(0)).buffer\r\n  }\r\n});\r\nexport const selectSongStage = (state: RootState) => state.song.songStage;\r\n\r\nexport default songSlice.reducer;\r\n","const dev = {\n    apiGateway: {\n      URL: \"http://localhost:3001/api\"\n    },\n  };\n  \n  const prod = {\n    apiGateway: {\n        URL: \"/api\"\n      },\n  };\n  \n  const config = process.env.REACT_APP_STAGE === 'production'\n    ? prod\n    : dev;\n  \n  export default {\n    // Add common config values here\n    ...config\n  };","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n// @ts-ignore\r\nimport { AwesomeButton } from 'react-awesome-button';\r\nimport 'react-awesome-button/dist/themes/theme-c137.css';\r\nimport * as Tone from 'tone';\r\n\r\nimport {\r\n  fetchSong,\r\n} from './songSlice';\r\n\r\nfunction isBlank(str: string | null) {\r\n  return (!str || str.trim().length === 0);\r\n}\r\n\r\nexport function SongInit() {\r\n\r\n  const [topic, setTopic] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const topic = searchParams.get(\"topic\");\r\n\r\n    if (!isBlank(topic)) {\r\n      setTopic(topic || \"\");\r\n    }\r\n  }, [])\r\n\r\n  function onClickHandler() {\r\n      Tone.start();\r\n      dispatch(fetchSong(topic));\r\n  }\r\n\r\n  function handleTopicInput(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setTopic(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"col init\">\r\n            <form onSubmit={onClickHandler}>\r\n              <label>\r\n                Sing me a song about:\r\n                <input className=\"topicInput\" value={topic} type=\"text\" onChange={ handleTopicInput }/>\r\n              </label>\r\n              <div>\r\n                <AwesomeButton type=\"primary\" onPress={onClickHandler}>Sing for me</AwesomeButton>\r\n              </div>\r\n            </form>\r\n          </div>\r\n  );\r\n}\r\n","/* eslint-disable no-mixed-operators */\n\nfunction xmur3(str: string) {\n    for (var i = 0, h = 1779033703 ^ str.length; i < str.length; i++) {\n      h = Math.imul(h ^ str.charCodeAt(i), 3432918353);\n      h = h << 13 | h >>> 19;\n    }\n    return function () {\n      h = Math.imul(h ^ h >>> 16, 2246822507);\n      h = Math.imul(h ^ h >>> 13, 3266489909);\n      return (h ^= h >>> 16) >>> 0;\n    }\n  }\n  \nfunction mulberry32SeededRandom(seed: number) {\n    return function () {\n        var t = seed += 0x6D2B79F5;\n        t = Math.imul(t ^ t >>> 15, t | 1);\n        t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n        return ((t ^ t >>> 14) >>> 0) / 4294967296;\n    }\n}\n\n\nexport function psudorandomGeneratorFromString(str: string) {\n    return mulberry32SeededRandom(xmur3(str)());\n}","function fallbackCopyTextToClipboard(text: string) {\n    let textArea = document.createElement(\"textarea\");\n    textArea.value = text;\n\n    // Avoid scrolling to bottom\n    textArea.style.top = \"0\";\n    textArea.style.left = \"0\";\n    textArea.style.position = \"fixed\";\n\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n\n    try {\n        let successful = document.execCommand('copy');\n        let msg = successful ? 'successful' : 'unsuccessful';\n        console.log('Fallback: Copying text command was ' + msg);\n    } catch (err) {\n        console.error('Fallback: Oops, unable to copy', err);\n    }\n\n    document.body.removeChild(textArea);\n}\nexport function copyTextToClipboard(text: string) {\n    if (!window.navigator.clipboard) {\n        fallbackCopyTextToClipboard(text);\n        return;\n    }\n    window.navigator.clipboard.writeText(text).then(function() {\n        console.log('Async: Copying to clipboard was successful!');\n    }, function(err) {\n        console.error('Async: Could not copy text: ', err);\n    });\n}","import React, { useEffect } from 'react';\r\nimport * as Tone from 'tone';\r\n// @ts-ignore\r\nimport { AwesomeButton } from 'react-awesome-button';\r\nimport 'react-awesome-button/dist/themes/theme-c137.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { restart } from './songSlice';\r\nimport { psudorandomGeneratorFromString } from './SeededPsudoRandomGenerator';\r\nimport { useAlert } from 'react-alert';\r\nimport { copyTextToClipboard } from './clipboard-utils';\r\n\r\nfunction toSampler(audioBuffer: AudioBuffer) {\r\n  return new Tone.Sampler({\r\n    urls: {\r\n      \"C4\": audioBuffer,\r\n    },\r\n    release: 1\r\n  }).toDestination();\r\n}\r\n\r\nasync function playSong(words: { word: string; sound: ArrayBufferLike; }[]) {\r\n  const sounds: { sound: Tone.Sampler, word: string, duration: number }[] = await Promise.all(\r\n    words.map(async (item) => {\r\n      const audioBuffer = await Tone.getContext().decodeAudioData(item.sound.slice(0));\r\n      return {\r\n        sound: toSampler(audioBuffer),\r\n        word: item.word,\r\n        duration: audioBuffer.duration\r\n      }\r\n    })\r\n  );\r\n\r\n  await Tone.loaded();\r\n\r\n  const time = Tone.now();\r\n\r\n  const random = psudorandomGeneratorFromString(words[0].word);\r\n  let timeAdd = 5;\r\n  const spaceBetween = 0.01;\r\n  const baseNote = 60;\r\n  const cutBy = 0.2;\r\n  const chanceOfPause = 0;\r\n  const lengthOfPause = 1;\r\n  for (let i = 0; i < sounds.length; i++) {\r\n    const sampler = sounds[i].sound;\r\n    const length = sounds[i].duration * (1 - cutBy);\r\n    const deviateNoteBy = 2;\r\n    const randomNoteChange = Math.floor(random() * deviateNoteBy * 2) - deviateNoteBy;\r\n    const deviateTimeBy = 0.1;\r\n    const randomTimeChange = random() * deviateTimeBy * 2 - deviateTimeBy;\r\n    sampler.triggerAttackRelease([Tone.Midi(baseNote + randomNoteChange).toFrequency()], length + randomTimeChange, time + timeAdd);\r\n\r\n    let pause = 0;\r\n\r\n    if (random() <= chanceOfPause) {\r\n      pause = lengthOfPause;\r\n    }\r\n\r\n    timeAdd += length + randomTimeChange + spaceBetween + pause;\r\n  }\r\n\r\n  const player = new Tone.Player({\r\n    url: \"/its-not-over-til-the-bossa-nova.mp3\",\r\n    volume: -13,\r\n    fadeOut: 2\r\n\r\n  }).toDestination();\r\n  Tone.loaded().then(() => {\r\n    player.start(Tone.now(), 0, timeAdd + 3);\r\n  });\r\n\r\n  return () => {\r\n    for (let i = 0; i < sounds.length; i++) {\r\n      const sampler = sounds[i].sound;\r\n      sampler.dispose();\r\n    }\r\n    player.stop(Tone.now());\r\n  }\r\n}\r\n\r\nfunction triedToStopNullSong() {\r\n  console.log(\"Attempted to stop null song\");\r\n}\r\n\r\nconst {\r\n  stopSong, \r\n  setStopSongFunction\r\n}: {\r\n  stopSong: () => void, \r\n  setStopSongFunction: (f: () => void) => void\r\n} = (() => {\r\n  let stopSongFunction = triedToStopNullSong;\r\nreturn {\r\n  stopSong: () => {\r\n    stopSongFunction();\r\n    stopSongFunction = triedToStopNullSong;\r\n  },\r\n  setStopSongFunction: (stopFunction: () => void) => {\r\n    stopSongFunction = stopFunction;\r\n  }\r\n}\r\n})();\r\n\r\nexport function PlayingSong(props: { words: { word: string; sound: ArrayBufferLike; }[] }) {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    playSong(props.words).then((stopFunction) => {\r\n      setStopSongFunction(stopFunction);\r\n    })\r\n  })\r\n\r\n  function startOver() {\r\n    stopSong();\r\n    dispatch(restart());\r\n  }\r\n\r\n  const alert = useAlert();\r\n\r\n  function replay() {\r\n    stopSong();\r\n    Tone.start().then(() => {\r\n      return playSong(props.words);\r\n    }).then((stopFunction) => {\r\n      setStopSongFunction(stopFunction);\r\n    })\r\n  }\r\n\r\n  function copySongLink() {\r\n    // @ts-ignore\r\n    if (window.navigator.share) {\r\n      // @ts-ignore\r\n      window.navigator.share({\r\n        title: 'Sentient Sam sings about ' + props.words[0].word,\r\n        text: 'Check out Sentient Sam. A robo-poet who\\'ll sing about whatever you want it to.' ,\r\n        url: window.location.href,\r\n      })\r\n        .then(() => console.log('Successful share'))\r\n        .catch((error: any) => console.log('Error sharing', error));\r\n    } else {\r\n      copyTextToClipboard(window.location.href);\r\n      console.log(\"copied link to clipboard\");\r\n      alert.show(\"Copied link to clipboard\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className='row justify-content-md-center'>\r\n        <div className='col-md-4'>\r\n          <img className='playingIcon' alt=\"The song has started playing\" src=\"music_black.svg\"></img>\r\n        </div>\r\n      </div>\r\n      <div className='row controls justify-content-md-center'>\r\n        <div className='col-md-auto'><AwesomeButton type=\"primary\" onPress={startOver}>Start Over</AwesomeButton></div>\r\n        <div className='col-md-auto'><AwesomeButton type=\"primary\" onPress={replay}>Replay</AwesomeButton></div>\r\n        <div className='col-md-auto'><AwesomeButton type=\"primary\" onPress={copySongLink}>Copy link to song</AwesomeButton></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { SongInit } from './SongInit';\r\nimport { SongStateEnum, selectSongStage, selectWords } from './songSlice';\r\nimport { PlayingSong } from './PlayingSong';\r\nimport 'loaders.css/loaders.css';\r\nimport Loader from 'react-loaders'\r\n\r\nfunction invalidState() {\r\n  return (\r\n    <div className='col'>\r\n      <h1>Invalid State</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function SongContainer() {\r\n  const stage = useSelector(selectSongStage);\r\n  const words = useSelector(selectWords);\r\n\r\n  switch(stage) {\r\n    case SongStateEnum.SELECTION:\r\n      return (\r\n        <div className='col'>\r\n          <SongInit/>\r\n        </div>\r\n      );\r\n    case SongStateEnum.PLAYING:\r\n        if (words == null) {\r\n          return invalidState();\r\n        }\r\n\r\n      return (\r\n        <div className='col'>\r\n          <PlayingSong words={words}/>\r\n        </div>\r\n      )\r\n    case SongStateEnum.LOADING:\r\n      return (\r\n        <div className=\"loadingAnimation\"> \r\n                {/*\r\n                  // @ts-ignore */}\r\n                <Loader active={true} color=\"black\" type=\"line-scale-party\"/>\r\n        </div>\r\n      )\r\n    default:\r\n      return invalidState();\r\n  }\r\n}\r\n","// @flow\r\nimport React from 'react';\r\nimport './App.css';\r\nimport { SongContainer } from './features/SongContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"row d-flex align-items-center min-vh-100\">\r\n          <SongContainer/>\r\n        </div>\r\n      </div>\r\n      <footer>\r\n            <div className=\"attribution\">\r\n              <div className=\"iconsAttribution\">Icons made by <a href=\"http://www.freepik.com/\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\r\n              <div className=\"musicAttribution\">Music: It's Not Over 'Til The Bossa Nova by Shane Ivers - <a href=\"https://www.silvermansound.com\">https://www.silvermansound.com</a></div>\r\n            </div>\r\n        </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport songReducer from '../features/songSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    song: songReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\r\nimport AlertTemplate from 'react-alert-template-basic'\r\n\r\n// optional configuration\r\nconst alertOptions = {\r\n  // you can also just use 'bottom center'\r\n  position: positions.BOTTOM_CENTER,\r\n  timeout: 3500,\r\n  offset: '30px',\r\n  // you can also just use 'scale'\r\n  transition: transitions.SCALE\r\n}\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <AlertProvider template={AlertTemplate} {...alertOptions}>\r\n        <App />\r\n      </AlertProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}