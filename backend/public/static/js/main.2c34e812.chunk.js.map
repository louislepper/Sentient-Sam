{"version":3,"sources":["features/start-tone.ts","features/SeededPsudoRandomGenerator.ts","features/audio-controller.ts","features/songSlice.ts","config.js","features/SongInit.tsx","features/ios-utils.ts","features/clipboard-utils.ts","features/PlayingSong.tsx","features/SongContainer.tsx","features/AboutContent.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["osc","Tone","gain","startTone","console","log","state","connect","start","toDestination","psudorandomGeneratorFromString","str","seed","i","h","length","Math","imul","charCodeAt","xmur3","t","currentSong","songState","initSong","words","topic","a","Promise","all","map","word","wordString","wordSound","decodeAudioData","slice","processedWords","Song","load","Error","stopSong","returnPromise","resolve","stop","then","startSong","play","clearSong","thisSong","dispose","on","backingTrackUrl","wordNotes","backingTrack","loaded","finishTime","fadeoutDuration","fadeoutDurationMs","this","random","url","volume","fadeOut","sync","timeAdd","reduce","acc","item","audioBuffer","sampler","urls","release","toSampler","originalDuration","duration","randomNoteChange","floor","note","toFrequency","processedWord","startTime","pause","triggerAttackRelease","loop","ms","now","r","setTimeout","cancel","SongStateEnum","config","apiGateway","URL","apiGatewayUrl","initialState","songStage","SELECTION","songSlice","createSlice","name","reducers","selectTopic","action","LOADING","payload","receiveSong","PLAYING","restart","innerRestart","actions","dispatch","window","history","pushState","fetchSong","queryParams","URLSearchParams","append","toString","fetch","response","ok","statusText","json","result","Uint8Array","from","atob","c","buffer","catch","e","getWordsSelector","song","getTopicSelector","selectSongStage","SongInit","useState","setTopic","useDispatch","onClickHandler","tonePromise","songData","useEffect","location","search","get","trim","className","onSubmit","value","type","onChange","target","onPress","includes","navigator","platform","userAgent","document","copyTextToClipboard","text","clipboard","writeText","err","error","textArea","createElement","style","top","left","position","body","appendChild","focus","select","msg","execCommand","removeChild","fallbackCopyTextToClipboard","PlayingSong","props","alert","useAlert","alt","src","share","title","href","show","invalidState","SongContainer","stage","useSelector","active","color","AboutContent","App","aboutModalOpen","setAboutModalOpen","onClick","open","onClose","center","store","configureStore","reducer","songReducer","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","alertOptions","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","ReactDOM","render","StrictMode","template","AlertTemplate","getElementById","process","origin","addEventListener","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2c34e812.chunk.js","sourcesContent":["import * as Tone from 'tone';\n\nconst osc = new Tone.Oscillator();\nconst gain = new Tone.Gain(1e-37);\n\n// Hack for audio context resumption in ios\nexport function startTone(){\n  Tone.start();\n  console.log(\"Audio context state: \" + Tone.context.state);\n  osc.connect(gain)\n  osc.start();\n  gain.toDestination();\n}","/* eslint-disable no-mixed-operators */\n\nfunction xmur3(str: string) {\n    for (var i = 0, h = 1779033703 ^ str.length; i < str.length; i++) {\n      h = Math.imul(h ^ str.charCodeAt(i), 3432918353);\n      h = h << 13 | h >>> 19;\n    }\n    return function () {\n      h = Math.imul(h ^ h >>> 16, 2246822507);\n      h = Math.imul(h ^ h >>> 13, 3266489909);\n      return (h ^= h >>> 16) >>> 0;\n    }\n  }\n  \nfunction mulberry32SeededRandom(seed: number) {\n    return function () {\n        var t = seed += 0x6D2B79F5;\n        t = Math.imul(t ^ t >>> 15, t | 1);\n        t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n        return ((t ^ t >>> 14) >>> 0) / 4294967296;\n    }\n}\n\n\nexport function psudorandomGeneratorFromString(str: string) {\n    return mulberry32SeededRandom(xmur3(str)());\n}","import * as Tone from 'tone';\nimport { psudorandomGeneratorFromString } from './SeededPsudoRandomGenerator';\nimport { Hertz } from 'tone/build/esm/core/type/Units';\n\nconst CONSTRUCTING = \"constructing\";\nconst LOADING = \"loading\";\nconst LOADED = \"loaded\";\nconst RUNNING = \"running\";\nconst DISPOSING = \"disposing\";\n\nfunction sleep(ms: number): Promise<void> {\n    return new Promise(r => setTimeout(r, ms));\n}\n\nlet currentSong: Song | null = null;\nlet songState: \"running\" | \"loaded\" | \"loading\" | \"constructing\" | \"disposing\" | null = null; \n\nexport async function initSong(words: { wordString: string; wordSound: ArrayBufferLike; }[], topic: string) {\n    if (songState === null) {\n        songState = CONSTRUCTING;\n        const processedWords = await Promise.all(words.map(async (word) => {\n            const {wordString, wordSound} = word;\n            return {\n                wordString,\n                wordSound: await Tone.getContext().decodeAudioData(wordSound.slice(0))\n            } \n        }));\n        currentSong = new Song(processedWords, \"/its-not-over-til-the-bossa-nova.mp3\", topic)\n        songState = LOADING;\n        await currentSong.load();\n        songState = LOADED;\n    } else {\n        throw new Error(\"Attempted to play song over already playing song.\");\n    }\n}\n\nexport function stopSong() {\n    let returnPromise = Promise.resolve();\n    if (currentSong != null && songState === RUNNING) {\n        returnPromise = currentSong.stop().then(() => {\n            songState = LOADED;\n        });\n    }\n    return returnPromise;\n}\n\nexport function startSong() {\n    if (currentSong !== null && songState === LOADED) {\n        currentSong.play();\n        songState = RUNNING;\n    }\n}\n\nTone.Transport.on(\"start\", () => {\n    console.log(\"Transport started\");\n});\n\nTone.Transport.on(\"stop\", () => {\n    console.log(\"Transport stopped\");\n});\n\nTone.Transport.on(\"pause\", () => {\n    console.log(\"Transport paused\");\n});\n\nexport async function clearSong() {\n    if (currentSong !== null && songState === \"running\") {\n        songState = DISPOSING;\n        // We must not await the dispose promise before clearing songState,\n        // as doing so allows songState to be set to null while another song is being initialised. \n        const thisSong = currentSong;\n        await thisSong.stop();\n        await thisSong.dispose();\n        currentSong = null;\n        songState = null;\n    }\n}\n\nconst spaceBetween = 0.01; // Space between two words\nconst baseNote = 60; // Default note to sing a word at\nconst deviateNoteBy = 2; // Randomly deviate note by this (in semitones?)\nconst cutBy = 0.2; // shorten each sample by (cut off the end)\nconst chanceOfPause = 0; // Chance of pausing afer saying a word\nconst lengthOfPause = 1; // How long to pause for.\nconst deviateTimeBy = 0.1; // Start saying a word this amount before or after expected (seconds)\n\ninterface InternalWordNotes {\n    sampler: Tone.Sampler, \n    word: string, \n    originalDuration: number,\n    duration: number,\n    note: Hertz[],\n    startTime: number\n}\n\nclass Song {\n    wordNotes: { \n        sampler: Tone.Sampler, \n        word: string, \n        originalDuration: number,\n        duration: number,\n        note: Hertz[],\n        startTime: number\n    }[];\n    backingTrack: Tone.Player;\n    loaded = false;\n    topic: string;\n    finishTime: number;\n    fadeoutDuration = 2;\n    fadeoutDurationMs = this.fadeoutDuration * 1000;\n    \n    constructor(words: { wordString: string; wordSound: AudioBuffer; }[], backingTrackUrl: string, topic: string) {\n        this.topic = topic;\n        const random = psudorandomGeneratorFromString(this.topic);\n\n        this.backingTrack = new Tone.Player({\n            url: backingTrackUrl,\n            volume: -13,\n            fadeOut: this.fadeoutDuration\n            }).toDestination().sync();\n        \n        let timeAdd = 5;\n\n        this.wordNotes = words.reduce<InternalWordNotes[]>((acc, item) => {\n            const audioBuffer = item.wordSound;\n              const sampler = toSampler(audioBuffer);\n              const originalDuration = audioBuffer.duration;\n\n              const randomTimeChange = random() * deviateTimeBy * 2 - deviateTimeBy;\n              const duration = originalDuration * (1 - cutBy) + randomTimeChange;\n              const randomNoteChange = Math.floor(random() * deviateNoteBy * 2) - deviateNoteBy;\n              const note = [Tone.Midi(baseNote + randomNoteChange).toFrequency()];\n\n              const processedWord = {\n                sampler,\n                word: item.wordString,\n                originalDuration,\n                duration,\n                note,\n                startTime: timeAdd\n              }\n\n              let pause = 0;\n        \n              if (random() <= chanceOfPause) {\n                pause = lengthOfPause;\n              }\n            \n              timeAdd += duration + spaceBetween + pause;\n\n              return [...acc, processedWord];\n        }, []);\n\n        this.finishTime = timeAdd + this.fadeoutDuration;\n        const time = 0;\n\n        this.backingTrack.start(time, 0, this.finishTime);\n\n        for (let i = 0; i < this.wordNotes.length; i++) {\n            const sampler = this.wordNotes[i].sampler;\n            sampler.triggerAttackRelease(\n                this.wordNotes[i].note || 440,\n                this.wordNotes[i].duration || 1, \n                (this.wordNotes[i].startTime || 0) + time\n            );\n        }\n        \n        Tone.Transport.loop = false;\n        console.log(\"Song constructed\");\n    }\n    \n    async load() {\n        await Tone.loaded();\n        this.loaded = true;\n        console.log(\"Song loaded\");\n    }\n\n    play() {\n        if (!this.loaded) {\n            throw Error(\"Song must be loaded before playing\");\n        }\n\n        Tone.Transport.start(Tone.now());\n        console.log(\"Song playing\");\n    }\n\n    stop() {\n        console.log(\"Song stopping\");\n        const now = Tone.now();\n        Tone.Transport.stop(now);\n        return sleep(this.fadeoutDurationMs);\n    }\n\n    async dispose(): Promise<void> {\n        console.log(\"Song disposing\");\n        Tone.Transport.cancel(0);\n        for (let i = 0; i < this.wordNotes.length; i++) {\n            const sampler = this.wordNotes[i].sampler;\n            sampler.dispose();\n        }\n        this.backingTrack.dispose();\n\n        console.log(\"Song disposed\");\n    }\n}\n\nfunction toSampler(audioBuffer: AudioBuffer) {\n    return new Tone.Sampler({\n      urls: {\n        \"C4\": audioBuffer,\n      },\n      release: 1\n    }).toDestination().sync();\n  }","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../app/store';\r\nimport config from '../config';\r\n\r\nconst apiGatewayUrl = config.apiGateway.URL;\r\n\r\nexport interface WordResult {\r\n  wordString: string;\r\n  wordSound: string;\r\n}\r\n\r\ninterface SongState {\r\n  songStage: SongStateEnum;\r\n  topic: string | null;\r\n  words: Array<string> | null;\r\n}\r\n\r\ninterface SongResultPayload {\r\n  topic: string;\r\n  words: Array<WordResult>;\r\n}\r\n\r\nexport enum SongStateEnum {\r\n  SELECTION,\r\n  LOADING,\r\n  PLAYING\r\n}\r\n\r\nconst initialState: SongState = {\r\n  songStage: SongStateEnum.SELECTION,\r\n  topic: null,\r\n  words: null\r\n};\r\n\r\nexport const songSlice = createSlice({\r\n  name: 'song',\r\n  initialState,\r\n  reducers: {\r\n    selectTopic: (state, action: PayloadAction<string>) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.songStage = SongStateEnum.LOADING;\r\n      state.topic = action.payload\r\n    },\r\n    receiveSong: (state, action: PayloadAction<SongResultPayload>) => {\r\n      state.songStage = SongStateEnum.PLAYING;\r\n      state.topic = action.payload.topic;\r\n      state.words = action.payload.words.map((word) => word.wordString);\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    restart: (state) => {\r\n      state.songStage = SongStateEnum.SELECTION;\r\n      state.topic = null;\r\n      state.words = null;\r\n    },\r\n  },\r\n});\r\n\r\nconst innerRestart = songSlice.actions.restart;\r\nconst { receiveSong, selectTopic } = songSlice.actions;\r\n\r\nexport const restart = (): AppThunk => dispatch => {\r\n  // @ts-ignore\r\n  window.history.pushState({}, '', \"/\");\r\n  dispatch(innerRestart());\r\n}\r\n\r\ninterface ProcessedWord {\r\n  wordString: string,\r\n  wordSound: ArrayBufferLike\r\n}\r\n\r\nfunction typedFetch<T>(url: string): Promise<T> {\r\n  return fetch(url)\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText)\r\n      }\r\n      return response.json() as Promise<T>\r\n    });\r\n}\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const fetchSong = (topic: string): AppThunk<Promise<ProcessedWord[] | null>> => dispatch => {\r\n  dispatch(selectTopic(topic))\r\n      \r\n  window.history.pushState({topic}, topic, \"?topic=\" + topic);\r\n\r\n  let queryParams = new URLSearchParams();\r\n  queryParams.append(\"topic\", topic);\r\n  queryParams.append(\"limit\", \"27\");\r\n  \r\n  return typedFetch<SongResultPayload>(`${apiGatewayUrl}/vocalTrack?${queryParams.toString()}`)\r\n        .then(json => {     \r\n          const result = {\r\n            topic: json.topic, \r\n            words: json.words\r\n          };  \r\n          dispatch(receiveSong(result));\r\n          return processWords(json.words);\r\n        })\r\n        .catch(e => {\r\n          console.log(\"Unable to fetch song - \" + e);\r\n          dispatch(restart());\r\n          return null;\r\n        });\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const getWordsSelector = (state: RootState) => state.song.words || [];\r\nexport const getTopicSelector = (state: RootState) => state.song.topic;\r\n\r\nfunction processWords(words: WordResult[]) {\r\n  return words.map(({wordSound, wordString})=> {\r\n    return {\r\n      wordString, \r\n      wordSound: Uint8Array.from(atob(wordSound), c => c.charCodeAt(0)).buffer\r\n    }\r\n  });\r\n}\r\n\r\nexport const selectSongStage = (state: RootState) => state.song.songStage;\r\n\r\nexport default songSlice.reducer;\r\n","const dev = {\n    apiGateway: {\n      URL: \"http://localhost:3001/api\"\n    },\n  };\n  \n  const prod = {\n    apiGateway: {\n        URL: \"/api\"\n      },\n  };\n  \n  const config = process.env.REACT_APP_STAGE === 'production'\n    ? prod\n    : dev;\n  \n  export default {\n    // Add common config values here\n    ...config\n  };","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n// @ts-ignore\r\nimport { AwesomeButton } from 'react-awesome-button';\r\nimport 'react-awesome-button/dist/themes/theme-c137.css';\r\nimport { isIOS } from './ios-utils';\r\nimport { startTone } from './start-tone';\r\nimport { initSong, startSong } from './audio-controller';\r\nimport { restart } from './songSlice';\r\n\r\nimport {\r\n  fetchSong,\r\n} from './songSlice';\r\n\r\nfunction isBlank(str: string | null) {\r\n  return (!str || str.trim().length === 0);\r\n}\r\n\r\nexport function SongInit() {\r\n\r\n  const [topic, setTopic] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const topic = searchParams.get(\"topic\");\r\n\r\n    if (!isBlank(topic)) {\r\n      setTopic(topic || \"\");\r\n    }\r\n  }, [])\r\n\r\n  async function onClickHandler() {\r\n      // Start up tone\r\n      const tonePromise = startTone();\r\n      // Fetch the song\r\n      // @ts-ignore\r\n      const songData: { wordString: string; wordSound: ArrayBufferLike; }[] = await dispatch(fetchSong(topic));\r\n\r\n      // Wait for tone to have finished starting up (likely already finished)\r\n      await tonePromise;\r\n\r\n      if (songData) {\r\n        try {\r\n          await initSong(songData, topic);\r\n          startSong();\r\n        } catch (e) {\r\n          console.log(\"Got an error, heading back to selection. \" + e);\r\n          dispatch(restart());\r\n        }\r\n      }\r\n  }\r\n\r\n  function handleTopicInput(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setTopic(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"col init\">\r\n            <form onSubmit={onClickHandler}>\r\n              <label>\r\n                Sing me a song about:\r\n                <input className=\"topicInput\" value={topic} type=\"text\" onChange={ handleTopicInput }/>\r\n              </label>\r\n              <div>\r\n                <AwesomeButton type=\"primary\" onPress={onClickHandler}>Sing for me</AwesomeButton>\r\n              </div>\r\n              {isIOS() &&\r\n                <div className=\"iphoneHint\"><p>Don't forget to unsilence your iphone (the physical switch on the top left of the phone) </p></div>\r\n              }\r\n            </form>\r\n          </div>\r\n  );\r\n}\r\n","export function isIOS() {\n    return [\n      'iPad Simulator',\n      'iPhone Simulator',\n      'iPod Simulator',\n      'iPad',\n      'iPhone',\n      'iPod'\n    ].includes(window.navigator.platform)\n    // iPad on iOS 13 detection\n    || (window.navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document)\n  }","function fallbackCopyTextToClipboard(text: string) {\n    let textArea = document.createElement(\"textarea\");\n    textArea.value = text;\n\n    // Avoid scrolling to bottom\n    textArea.style.top = \"0\";\n    textArea.style.left = \"0\";\n    textArea.style.position = \"fixed\";\n\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n\n    try {\n        let successful = document.execCommand('copy');\n        let msg = successful ? 'successful' : 'unsuccessful';\n        console.log('Fallback: Copying text command was ' + msg);\n    } catch (err) {\n        console.error('Fallback: Oops, unable to copy', err);\n    }\n\n    document.body.removeChild(textArea);\n}\nexport function copyTextToClipboard(text: string) {\n    if (!window.navigator.clipboard) {\n        fallbackCopyTextToClipboard(text);\n        return;\n    }\n    window.navigator.clipboard.writeText(text).then(function() {\n        console.log('Async: Copying to clipboard was successful!');\n    }, function(err) {\n        console.error('Async: Could not copy text: ', err);\n    });\n}","import React from 'react';\r\n// @ts-ignore\r\nimport { AwesomeButton } from 'react-awesome-button';\r\nimport 'react-awesome-button/dist/themes/theme-c137.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { restart } from './songSlice';\r\nimport { useAlert } from 'react-alert';\r\nimport { copyTextToClipboard } from './clipboard-utils';\r\nimport { startTone } from './start-tone';\r\nimport { clearSong, startSong, stopSong } from './audio-controller';\r\n\r\nexport function PlayingSong(props: { \r\n  words: string[],\r\n  topic: string\r\n}) {\r\n  const dispatch = useDispatch();\r\n\r\n  async function startOver() {\r\n    clearSong();\r\n    dispatch(restart());\r\n  }\r\n\r\n  const alert = useAlert();\r\n\r\n  async function replay() {\r\n    try {\r\n      await stopSong();\r\n      await startTone();\r\n      startSong();\r\n    } catch(e) {\r\n      console.log(\"Unable to replay song \" + e);\r\n    }\r\n  }\r\n\r\n  function copySongLink() {\r\n    // @ts-ignore\r\n    if (window.navigator.share) {\r\n      // @ts-ignore\r\n      window.navigator.share({\r\n        title: 'Sentient Sam sings about ' + props.topic,\r\n        text: 'Check out Sentient Sam. A robo-poet who\\'ll sing about whatever you want it to.' ,\r\n        url: window.location.href,\r\n      })\r\n        .then(() => console.log('Successful share'))\r\n        .catch((error: any) => console.log('Error sharing', error));\r\n    } else {\r\n      copyTextToClipboard(window.location.href);\r\n      console.log(\"copied link to clipboard\");\r\n      alert.show(\"Copied link to clipboard\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='col'>\r\n      <div className='row justify-content-md-center'>\r\n        <div className='col-md-4'>\r\n          <img className='playingIcon' alt=\"The song has started playing\" src=\"music_black.svg\"></img>\r\n          <h1 className=\"songTitle\">“{props.topic}”</h1>\r\n        </div>\r\n      </div>\r\n      <div className='row controls justify-content-md-center'>\r\n        <div className='col-md-auto control-buttons'><AwesomeButton type=\"primary\" onPress={startOver}>Start Over</AwesomeButton></div>\r\n        <div className='col-md-auto control-buttons'><AwesomeButton type=\"primary\" onPress={replay}>Replay</AwesomeButton></div>\r\n        <div className='col-md-auto control-buttons'><AwesomeButton type=\"primary\" onPress={copySongLink}>Copy link to song</AwesomeButton></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { SongInit } from './SongInit';\r\nimport { SongStateEnum, selectSongStage, getWordsSelector, getTopicSelector } from './songSlice';\r\nimport { PlayingSong } from './PlayingSong';\r\nimport 'loaders.css/loaders.css';\r\nimport Loader from 'react-loaders'\r\n\r\nfunction invalidState() {\r\n  return (\r\n    <div className='col'>\r\n      <h1>Invalid State</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function SongContainer() {\r\n  const stage = useSelector(selectSongStage);\r\n  const words = useSelector(getWordsSelector);\r\n  const topic = useSelector(getTopicSelector);\r\n\r\n  switch(stage) {\r\n    case SongStateEnum.SELECTION:\r\n      return (\r\n          <SongInit/>\r\n      );\r\n    case SongStateEnum.PLAYING:\r\n        if (words == null || topic == null) {\r\n          return invalidState();\r\n        }\r\n\r\n      return (\r\n          <PlayingSong words={words} topic={topic}/>\r\n      )\r\n    case SongStateEnum.LOADING:\r\n      return (\r\n        <div className=\"loadingAnimation\"> \r\n                {/*\r\n                  // @ts-ignore */}\r\n                <Loader active={true} color=\"black\" type=\"line-scale-party\"/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <p>loading...</p>\r\n        </div>\r\n      )\r\n    default:\r\n      return invalidState();\r\n  }\r\n}\r\n","import React from \"react\";\n\nexport function AboutContent() {\n    return (\n        <div className=\"aboutContent\">\n            <h2>Sentient Sam</h2>\n            <p>\n                Sentient Sam is a robot poet designed by <a href=\"http://louislepper.co.nz\">Louis Lepper</a>. \n            </p>\n            <p>\n                Be aware that Sam doesn't have a filter, \n                and may accidentally say things that offend.\n            </p>\n            <p>\n                If you have any questions or comments let me know \n                at <a href=\"mailto:public@louislepper.co.nz\">public@louislepper.co.nz</a>\n            </p>\n            <p>Check out the sourcecode at <a href=\"https://github.com/louislepper/Sentient-Sam\">https://github.com/louislepper/Sentient-Sam</a>.</p>\n            <p>\n            Thank you very much to <a href=\"https://www.freepik.com/\">freepik.com</a> for \n            the royalty free images, \n            and to <a href=\"https://www.silvermansound.com/\">Shane Ivers</a> for \n            the backing track \"It's Not Over 'Til The Bossa Nova\".\n            </p>\n        </div>\n    );\n}","// @flow\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\nimport { SongContainer } from './features/SongContainer';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport { AboutContent } from './features/AboutContent';\r\n\r\nfunction App() {\r\n  const [aboutModalOpen, setAboutModalOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <p className=\"fontPreloader\">.</p>\r\n      <header>\r\n        <nav>\r\n          <div className=\"navButtons\">\r\n            <button \r\n              type=\"button\"\r\n              className=\"link-button\" \r\n              onClick={() => setAboutModalOpen(true)}>\r\n                About\r\n            </button>\r\n            <Modal open={aboutModalOpen} onClose={() => setAboutModalOpen(false)} center>\r\n              <AboutContent/>\r\n            </Modal>\r\n          </div>\r\n        </nav>\r\n      </header>\r\n      <div className=\"container min-vh-100 song-container\">\r\n        <div className=\"row min-vh-100 justify-content-center align-items-center\">\r\n          <SongContainer/>\r\n        </div>\r\n      </div>\r\n      <footer>\r\n            <div className=\"attribution\">\r\n              <div className=\"iconsAttribution\">Icons made by <a href=\"http://www.freepik.com/\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\r\n              <div className=\"musicAttribution\">Music: It's Not Over 'Til The Bossa Nova by Shane Ivers - <a href=\"https://www.silvermansound.com\">https://www.silvermansound.com</a></div>\r\n            </div>\r\n        </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport songReducer from '../features/songSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    song: songReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\r\nimport AlertTemplate from 'react-alert-template-basic'\r\n\r\n// optional configuration\r\nconst alertOptions = {\r\n  // you can also just use 'bottom center'\r\n  position: positions.BOTTOM_CENTER,\r\n  timeout: 3500,\r\n  offset: '30px',\r\n  // you can also just use 'scale'\r\n  transition: transitions.SCALE\r\n}\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <AlertProvider template={AlertTemplate} {...alertOptions}>\r\n        <App />\r\n      </AlertProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}