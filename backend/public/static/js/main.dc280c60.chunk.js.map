{"version":3,"sources":["features/songSlice.ts","config.js","features/SongInit.tsx","features/PlayingSong.tsx","features/SongContainer.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["SongStateEnum","config","apiGateway","URL","apiGatewayUrl","initialState","songStage","SELECTION","topic","words","songSlice","createSlice","name","reducers","selectTopic","state","action","LOADING","payload","receiveSong","PLAYING","restart","actions","selectWords","song","map","word","sound","Uint8Array","from","atob","c","charCodeAt","buffer","selectSongStage","SongInit","useState","setTopic","dispatch","useDispatch","className","type","onChange","e","target","value","onPress","queryParams","URLSearchParams","append","fetch","toString","then","response","json","fetchSong","promisifyPlayer","audioBuffer","Promise","resolutionFunc","player","Tone","toDestination","onstop","start","toSampler","urls","release","a","triggerAttackRelease","all","item","decodeAudioData","sounds","samplers","time","timeAdd","i","length","sampler","randomNoteChange","Math","floor","random","randomTimeChange","toFrequency","PlayingSong","props","useEffect","playSong","src","invalidState","SongContainer","stage","useSelector","active","color","App","href","title","store","configureStore","reducer","songReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc280c60.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../app/store';\r\nimport config from '../config';\r\n\r\nconst apiGatewayUrl = config.apiGateway.URL;\r\n\r\nexport interface WordResult {\r\n  word: string;\r\n  sound: string;\r\n}\r\n\r\ninterface SongState {\r\n  songStage: SongStateEnum;\r\n  topic: string | null;\r\n  words: Array<WordResult> | null;\r\n}\r\n\r\ninterface SongResultPayload {\r\n  topic: string;\r\n  words: Array<WordResult>;\r\n}\r\n\r\nexport enum SongStateEnum {\r\n  SELECTION,\r\n  LOADING,\r\n  PLAYING\r\n}\r\n\r\nconst initialState: SongState = {\r\n  songStage: SongStateEnum.SELECTION,\r\n  topic: null,\r\n  words: null\r\n};\r\n\r\nexport const songSlice = createSlice({\r\n  name: 'song',\r\n  initialState,\r\n  reducers: {\r\n    selectTopic: (state, action: PayloadAction<string>) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.songStage = SongStateEnum.LOADING;\r\n      state.topic = action.payload\r\n    },\r\n    receiveSong: (state, action: PayloadAction<SongResultPayload>) => {\r\n      state.songStage = SongStateEnum.PLAYING;\r\n      state.topic = action.payload.topic;\r\n      state.words = action.payload.words;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    restart: (state) => {\r\n      state.songStage = SongStateEnum.SELECTION;\r\n      state.topic = null;\r\n      state.words = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { restart } = songSlice.actions;\r\nconst { receiveSong, selectTopic } = songSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const fetchSong = (topic: string): AppThunk => dispatch => {\r\n  dispatch(selectTopic(topic))\r\n\r\n  let queryParams = new URLSearchParams();\r\n  queryParams.append(\"topic\", topic);\r\n  \r\n  fetch(`${apiGatewayUrl}/vocalTrack?${queryParams.toString()}`)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(json => {          \r\n          dispatch(receiveSong({\r\n            topic: json.topic, \r\n            words: json.words\r\n          }));\r\n        });\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectWords = (state: RootState) => state.song.words?.map(({word, sound})=> {\r\n  return {\r\n    word, \r\n    sound: Uint8Array.from(atob(sound), c => c.charCodeAt(0)).buffer\r\n  }\r\n});\r\nexport const selectSongStage = (state: RootState) => state.song.songStage;\r\n\r\nexport default songSlice.reducer;\r\n","const dev = {\n    apiGateway: {\n      URL: \"http://localhost:3001/api\"\n    },\n  };\n  \n  const prod = {\n    apiGateway: {\n        URL: \"/api\"\n      },\n  };\n  \n  const config = process.env.REACT_APP_STAGE === 'production'\n    ? prod\n    : dev;\n  \n  export default {\n    // Add common config values here\n    ...config\n  };","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// @ts-ignore\r\nimport { AwesomeButton } from 'react-awesome-button';\r\nimport 'react-awesome-button/dist/themes/theme-c137.css';\r\n\r\nimport {\r\n  restart,\r\n  fetchSong,\r\n} from './songSlice';\r\n\r\n\r\nexport function SongInit() {\r\n\r\n  const [topic, setTopic] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function onClickHandler() {\r\n      dispatch(fetchSong(topic));\r\n  }\r\n\r\n  function handleTopicInput(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setTopic(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"col init\">\r\n            <form>\r\n              <label>\r\n                Sing me a song about:\r\n                <input className=\"topicInput\" type=\"text\" onChange={ handleTopicInput }/>\r\n              </label>\r\n              <div>\r\n                <AwesomeButton type=\"primary\" onPress={onClickHandler}>Sing for me</AwesomeButton>\r\n              </div>\r\n            </form>\r\n          </div>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport * as Tone from 'tone';\r\n\r\nfunction promisifyPlayer(audioBuffer: AudioBuffer) {\r\n  return () => {\r\n    return new Promise( (resolutionFunc) => {\r\n      const player = new Tone.Player(audioBuffer).toDestination();\r\n      player.onstop = resolutionFunc;\r\n      Tone.loaded().then(() => {\r\n        player.start();\r\n      });\r\n    });\r\n  }\r\n}\r\nfunction toSampler(audioBuffer: AudioBuffer) {\r\n  return new Tone.Sampler({\r\n    urls: {\r\n      \"C4\": audioBuffer,\r\n    },\r\n    release: 1\r\n  }).toDestination();\r\n}\r\n\r\nasync function playSong(words: { word: string; sound: ArrayBufferLike; }[]) {\r\n      //create a synth and connect it to the main output (your speakers)\r\n    const synth = new Tone.Synth().toDestination();\r\n\r\n    //play a middle 'C' for the duration of an 8th note\r\n    synth.triggerAttackRelease(\"C4\", \"8n\");\r\n\r\n    const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\r\n    Tone.loaded().then(() => {\r\n      player.start();\r\n    });\r\n    \r\n    const sounds = await Promise.all(words.map((item) => Tone.getContext().decodeAudioData(item.sound)));\r\n\r\n    const playerPromises = sounds.map((audioBuffer) => promisifyPlayer(audioBuffer));\r\n\r\n    const samplers = sounds.map((audioBuffer) => toSampler(audioBuffer));\r\n\r\n    await Tone.loaded();\r\n\r\n    const time = Tone.now();\r\n\r\n\r\n  let timeAdd = 1;\r\n  let length = 0.5\r\n  let note = 60;\r\n  for (let i = 0; i < samplers.length; i++) {\r\n      const sampler = samplers[i];\r\n      const randomNoteChange = Math.floor(Math.random() * 10) - 5;\r\n      const randomTimeChange = Math.random() * 0.5 - 0.25;\r\n      sampler.triggerAttackRelease([Tone.Midi(note + randomNoteChange).toFrequency()], length + randomTimeChange, time + timeAdd);\r\n      \r\n      timeAdd += length + randomTimeChange;\r\n    }\r\n\r\n    // for (let i = 0; i < sounds.length; i++) {\r\n    //   await playerPromises[i]();\r\n    // }\r\n}\r\n\r\n\r\nexport function PlayingSong(props: {words: { word: string; sound: ArrayBufferLike; }[]}) {\r\n  \r\n  useEffect(() => {\r\n    playSong(props.words);\r\n  })\r\n  \r\n  return (\r\n    <div className='col-md-4 offset-md-4'>\r\n      <img src=\"music_black.svg\"></img>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { SongInit } from './SongInit';\r\nimport { SongStateEnum, selectSongStage, selectWords } from './songSlice';\r\nimport { PlayingSong } from './PlayingSong';\r\nimport 'loaders.css/loaders.css';\r\nimport Loader from 'react-loaders'\r\n\r\nfunction invalidState() {\r\n  return (\r\n    <div className='col'>\r\n      <h1>Invalid State</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function SongContainer() {\r\n  const stage = useSelector(selectSongStage);\r\n  const words = useSelector(selectWords);\r\n\r\n  switch(stage) {\r\n    case SongStateEnum.SELECTION:\r\n      return (\r\n        <div className='col'>\r\n          <SongInit/>\r\n        </div>\r\n      );\r\n    case SongStateEnum.PLAYING:\r\n        if (words == null) {\r\n          return invalidState();\r\n        }\r\n\r\n      return (\r\n        <div className='col'>\r\n          <PlayingSong words={words}/>\r\n        </div>\r\n      )\r\n    case SongStateEnum.LOADING:\r\n      return (\r\n        <div className=\"loadingAnimation\"> \r\n                {/*\r\n                  // @ts-ignore */}\r\n                <Loader active={true} color=\"black\" type=\"line-scale-party\"/>\r\n        </div>\r\n      )\r\n    default:\r\n      return invalidState();\r\n  }\r\n}\r\n","// @flow\r\nimport React from 'react';\r\nimport './App.css';\r\nimport { SongContainer } from './features/SongContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"row d-flex align-items-center min-vh-100\">\r\n          <SongContainer/>\r\n        </div>\r\n      </div>\r\n      <footer>\r\n            <div className=\"attribution\">\r\n              Icons made by <a href=\"http://www.freepik.com/\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a>\r\n            </div>\r\n        </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport songReducer from '../features/songSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    song: songReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}